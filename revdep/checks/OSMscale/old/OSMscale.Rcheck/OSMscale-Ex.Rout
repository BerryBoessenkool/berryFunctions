
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "OSMscale"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('OSMscale')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("OSMscale-package")
> ### * OSMscale-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: OSMscale-package
> ### Title: Add a Scalebar to OpenStreetMap Plots
> ### Aliases: OSMscale-package OSMscale
> ### Keywords: documentation package
> 
> ### ** Examples
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("biketrack")
> ### * biketrack
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: biketrack
> ### Title: GPS recorded bike track
> ### Aliases: biketrack
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> data(biketrack)
> plot(biketrack[,1:2])
> # see equidistPoints
> 
> 
> 
> 
> cleanEx()
> nameEx("checkLL")
> ### * checkLL
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: checkLL
> ### Title: lat-long coordinate check
> ### Aliases: checkLL
> 
> ### ** Examples
> 
> checkLL(lat=52, long=130)
> checkLL(130, 52, fun=message)

Call stack: checkLL
 lat values must be lesser than 90. Actual max is 130.
You may have swapped lat and long somewhere.
> checkLL(85:95, 0, fun=message)

Call stack: checkLL
 lat values must be lesser than 90. Actual max is 95.
You may have swapped lat and long somewhere.
> 
> d <- data.frame(x=0, y=0)
> checkLL(y,x, d)
> 
> # informative errors:
> library("berryFunctions")
Warning: package 'berryFunctions' was built under R version 3.6.3
> is.error(   checkLL(85:95, 0, fun="message"),  tell=TRUE)
Note in is.error: Error in checkLL(85:95, 0, fun = "message") : 
  fun must be unquoted. Use fun=message instead of fun='message'.

[1] TRUE
> is.error(   checkLL(170,35),  tell=TRUE)
Note in is.error: Error in checkLL(170, 35) : 
Call stack: is.error -> try -> checkLL
 lat values must be lesser than 90. Actual max is 170.
You may have swapped lat and long somewhere.

[1] TRUE
> 
> mustfail <- function(expr) stopifnot(berryFunctions::is.error(expr))
> mustfail( checkLL(100)         )
> mustfail( checkLL(100, 200)    )
> mustfail( checkLL(-100, 200)   )
> mustfail( checkLL(90.000001, 0)   )
> 
> 
> 
> 
> cleanEx()

detaching 'package:berryFunctions'

> nameEx("degree")
> ### * degree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: degree
> ### Title: decimal degree coordinate conversion
> ### Aliases: degree
> ### Keywords: character spatial
> 
> ### ** Examples
> 
> # DECIMAL to DMS notation: --------------------------------------------------
> degree(52.366360, 13.024181)
           lat         long
1 52°21'58.9"N 13°01'27.1"E
> degree(c(52.366360, -32.599203), c(13.024181,-55.809601))
           lat         long
1 52°21'58.9"N 13°01'27.1"E
2 32°35'57.1"S 55°48'34.6"W
> degree(52.366360, 13.024181, drop=TRUE) # vector
            lat            long 
"52°21'58.9\"N" "13°01'27.1\"E" 
> degree(47.001, -13.325731, digits=5)
           lat            long
1 47°00'03.6"N 13°19'32.6316"W
> 
> # Use table with values instead of single vectors:
> d <- read.table(header=TRUE, sep=",", text="
+ lat, long
+  52.366360,  13.024181
+ -32.599203, -55.809601")
> degree(lat, long, data=d)
           lat         long
1 52°21'58.9"N 13°01'27.1"E
2 32°35'57.1"S 55°48'34.6"W
> 
> # DMS to DECIMAL notation: --------------------------------------------------
> # You can use the degree symbol and escaped quotation mark (\") as well.
> degree("52'21'58.9'N", "13'1'27.1'E")
       lat     long
1 52.36636 13.02419
> print(degree("52'21'58.9'N", "13'1'27.1'E"), digits=15)
        lat      long
1 52.366361 13.024194
> 
> d2 <- read.table(header=TRUE, stringsAsFactors=FALSE, text="
+ lat long
+ 52'21'58.9'N 13'01'27.1'E
+ 32'35'57.1'S 55'48'34.6'W") # columns cannot be comma-separated!
> degree(lat, long, data=d2)
        lat      long
1  52.36636  13.02419
2 -32.59919 -55.80961
> 
> # Rounding error checks: ----------------------------------------------------
> oo <- options(digits=15)
> d
         lat       long
1  52.366360  13.024181
2 -32.599203 -55.809601
> degree(lat, long, data=degree(lat, long, d))
         lat       long
1  52.366361  13.024194
2 -32.599194 -55.809611
> degree(lat, long, data=degree(lat, long, d, digits=3))
         lat       long
1  52.366360  13.024181
2 -32.599203 -55.809601
> options(oo)
> stopifnot(all(degree(lat,long,data=degree(lat,long,d, digits=3))==d))
> 
> 
> 
> 
> cleanEx()
> nameEx("earthDist")
> ### * earthDist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: earthDist
> ### Title: distance between lat-long coordinates
> ### Aliases: earthDist
> ### Keywords: spatial
> 
> ### ** Examples
> 
> d <- read.table(header=TRUE, sep=",", text="
+ lat, long
+ 52.514687,  13.350012   # Berlin
+ 51.503162,  -0.131082   # London
+ 35.685024, 139.753365") # Tokio
> earthDist(lat, long, d)      # from Berlin to L and T: 928 and 8922 km
[1]    0.0000  928.1557 8922.2195
> earthDist(lat, long, d, i=2) # from London to B and T: 928 and 9562 km
[1]  928.1557    0.0000 9561.9303
> 
> # slightly different with other formulas:
> # install.packages("geosphere")
> # geosphere::distHaversine(as.matrix(d[1,2:1]), as.matrix(d[2,2:1])) / 1000
> 
> 
> # compare with UTM distance
> set.seed(42)
> d <- data.frame(lat=runif(100, 47,54), long=runif(100, 6, 15))
> d2 <- projectPoints(d$lat, d$long)
> d_utm <- berryFunctions::distance(d2$x[-1],d2$y[-1], d2$x[1],d2$y[1])/1000
> d_earth <- earthDist(lat,long, d)[-1]
> plot(d_utm, d_earth) # distances in km
> hist(d_utm-d_earth) # UTM distance slightly larger than earth distance
> plot(d_earth, d_utm-d_earth) # correlates with distance
> berryFunctions::colPoints(d2$x[-1], d2$y[-1], d_utm-d_earth, add=FALSE)
> points(d2$x[1],d2$y[1], pch=3, cex=2, lwd=2)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("equidistPoints")
> ### * equidistPoints
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: equidistPoints
> ### Title: Evenly spaced points along path
> ### Aliases: equidistPoints
> ### Keywords: spatial
> 
> ### ** Examples
> 
> library(berryFunctions) # distance, colPoints etc
Warning: package 'berryFunctions' was built under R version 3.6.3
> x <- c(2.7, 5, 7.8, 10.8, 13.7, 15.8, 17.4, 17.7, 16.2, 15.8, 15.1, 13.1, 9.3, 4.8, 6.8, 12.2)
> y <- c(2.3, 2.1, 2.6, 3.3, 3.7, 4.7, 7.6, 11.7, 12.4, 12.3, 12.3, 12.3, 12, 12.1, 17.5, 19.6)
> eP <- equidistPoints(x,y, n=10) ; eP
           x         y
1   2.700000  2.300000
2   7.240000  2.500000
3  11.670000  3.420000
4  15.906667  4.893333
5  17.500000  8.966667
6  16.000000 12.350000
7  11.453333 12.170000
8   6.900000 12.053333
9   5.666667 14.440000
10  7.880000 17.920000
11 12.200000 19.600000
> plot(x,y, type="o", pch=4)
> points(equidistPoints(x,y, n=10), col=4, pch=16)
> points(equidistPoints(x,y, n=10, nint=1), col=2) # from original point set
> round(distance(eP$x, eP$y), 2) # the 2.69 instead of 4.50 is in the sharp curve
 [1] 0.00 4.54 4.52 4.49 4.37 3.70 4.55 4.55 2.69 4.12 4.64
> # These points are quidistant along the original track
> 
> plot(x,y, type="o", pch=16, col=2)
> round(sort(distance(x,y)), 2)
 [1] 0.00 0.41 0.70 1.66 2.00 2.31 2.33 2.84 2.93 3.08 3.31 3.81 4.11 4.50 5.76
[16] 5.79
> xn <- equidistPoints(x,y, n=10)$x
> yn <- equidistPoints(x,y, n=10)$y
> lines(xn,yn, type="o", pch=16)
> round(sort(distance(xn,yn)), 2)
 [1] 0.00 2.69 3.70 4.12 4.37 4.49 4.52 4.54 4.55 4.55 4.64
> for(i in 1:8)
+ {
+ xn <- equidistPoints(xn,yn, n=10)$x
+ yn <- equidistPoints(xn,yn, n=10)$y
+ lines(xn,yn, type="o", pch=16)
+ print(round(sort(distance(xn,yn)), 2))
+ } # We may recursively get closer to equidistant along track _and_ air,
 [1] 0.00 3.56 3.85 3.91 3.99 4.05 4.20 4.21 4.23 4.24 4.25
 [1] 0.00 3.77 3.81 3.90 3.95 3.96 4.04 4.07 4.08 4.09 4.10
 [1] 0.00 3.79 3.85 3.86 3.96 3.96 3.96 3.97 3.98 3.98 4.09
 [1] 0.00 3.85 3.85 3.91 3.93 3.95 3.96 3.96 3.96 3.96 3.96
 [1] 0.00 3.83 3.85 3.91 3.93 3.95 3.96 3.96 3.96 3.96 3.98
 [1] 0.00 3.83 3.83 3.91 3.93 3.95 3.96 3.96 3.96 3.98 3.98
 [1] 0.00 3.83 3.83 3.91 3.93 3.95 3.96 3.96 3.96 3.98 3.98
 [1] 0.00 3.83 3.83 3.91 3.93 3.95 3.96 3.96 3.96 3.98 3.98
> # but never actually reach it.
> 
> # Real dataset:
> data(biketrack)
> colPoints(lon, lat, ele, data=biketrack, add=FALSE, asp=1, pch=4, lines=TRUE)
> points(equidistPoints(lon, lat, data=biketrack, n=25), pch=3, lwd=3, col=2)
> bt2 <- equidistPoints(lon, lat, ele, data=biketrack, n=25)
> bt2$dist <- distance(bt2$x, bt2$y)*1000
> colPoints(x, y, z, data=bt2, legend=FALSE)
> # in curves, crow-distance is shorter sometimes
> plot(lat~lon, data=biketrack, asp=1, type="l")
> colPoints(x, y, dist, data=bt2, Range=c(2.5,4), add=TRUE, asp=1, pch=3, lwd=5)
Warning in classify(x = z, method = method, breaks = breaks, sdlab = sdlab,  :
  There are 1 (out of 26) values outside of the range of the given classes.
These are given the index 101 (lower, n=1) and 102 (higher, n=0).
> lines(lat~lon, data=biketrack)
> 
> 
> 
> 
> cleanEx()

detaching 'package:berryFunctions'

> nameEx("maxEarthDist")
> ### * maxEarthDist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: maxEarthDist
> ### Title: maximum distance between set of points
> ### Aliases: maxEarthDist
> ### Keywords: spatial
> 
> ### ** Examples
> 
> 
> d <- read.table(header=TRUE, text="
+     x     y
+ 9.19 45.73
+ 6.55 58.13
+ 7.71 71.44")
> 
> plot(d, asp=1, pch=as.character(1:3))
> earthDist(y,x,d, i=2)
[1] 1390.375    0.000 1480.957
> earthDist(y,x,d, i=3)
[1] 2859.910 1480.957    0.000
> 
> maxEarthDist(y,x,d)
[1] 2859.91
> 
> 
> 
> 
> cleanEx()
> nameEx("pointsMap")
> ### * pointsMap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pointsMap
> ### Title: Get map for lat-long points
> ### Aliases: pointsMap
> ### Keywords: hplot spatial
> 
> ### ** Examples
> 
> if(interactive()){
+ d <- read.table(sep=",", header=TRUE, text=
+ "lat, long # could e.g. be copied from googleMaps, rightclick on What's here?
+ 43.221028, -123.382998
+ 43.215348, -123.353804
+ 43.227785, -123.368694
+ 43.232649, -123.355895")
+ 
+ map <- pointsMap(lat, long, data=d)
+ map_utm <- pointsMap(lat, long, d, map=map, proj=putm(d$long))
+ axis(1); axis(2) # now in meters
+ projectPoints(d$lat, d$long)
+ scaleBar(map_utm, x=0.2, y=0.8, unit="mi", type="line", col="red", length=0.25)
+ pointsMap(lat, long, d[1:2,], map=map_utm, add=TRUE, col="red", pch=3, pargs=list(lwd=3))
+ 
+ d <- data.frame(long=c(12.95, 12.98, 13.22, 13.11), lat=c(52.40,52.52, 52.36, 52.45))
+ map <- pointsMap(lat,long,d, type="bing") # aerial map
+ }
> 
> 
> 
> 
> cleanEx()
> nameEx("proj")
> ### * proj
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: proj
> ### Title: CRS of various PROJ.4 projections
> ### Aliases: proj putm posm pll posm pll
> ### Keywords: spatial
> 
> ### ** Examples
> 
> posm()
Warning in showSRID(uprojargs, format = "PROJ", multiline = "NO") :
  Discarded ellps WGS 84 in CRS definition: +proj=merc +a=6378137 +b=6378137 +lat_ts=0 +lon_0=0 +x_0=0 +y_0=0 +k=1 +units=m +nadgrids=@null +wktext +no_defs
Warning in showSRID(uprojargs, format = "PROJ", multiline = "NO") :
  Discarded datum WGS_1984 in CRS definition
CRS arguments:
 +proj=merc +a=6378137 +b=6378137 +lat_ts=0 +lon_0=0 +x_0=0 +y_0=0 +k=1
+units=m +nadgrids=@null +wktext +no_defs 
> str(posm())
Warning in showSRID(uprojargs, format = "PROJ", multiline = "NO") :
  Discarded ellps WGS 84 in CRS definition: +proj=merc +a=6378137 +b=6378137 +lat_ts=0 +lon_0=0 +x_0=0 +y_0=0 +k=1 +units=m +nadgrids=@null +wktext +no_defs
Warning in showSRID(uprojargs, format = "PROJ", multiline = "NO") :
  Discarded datum WGS_1984 in CRS definition
Formal class 'CRS' [package "sp"] with 1 slot
  ..@ projargs: chr "+proj=merc +a=6378137 +b=6378137 +lat_ts=0 +lon_0=0 +x_0=0 +y_0=0 +k=1 +units=m +nadgrids=@null +wktext +no_defs"
> posm()@projargs
Warning in showSRID(uprojargs, format = "PROJ", multiline = "NO") :
  Discarded ellps WGS 84 in CRS definition: +proj=merc +a=6378137 +b=6378137 +lat_ts=0 +lon_0=0 +x_0=0 +y_0=0 +k=1 +units=m +nadgrids=@null +wktext +no_defs
Warning in showSRID(uprojargs, format = "PROJ", multiline = "NO") :
  Discarded datum WGS_1984 in CRS definition
[1] "+proj=merc +a=6378137 +b=6378137 +lat_ts=0 +lon_0=0 +x_0=0 +y_0=0 +k=1 +units=m +nadgrids=@null +wktext +no_defs"
> pll()
CRS arguments: +proj=longlat +datum=WGS84 +no_defs 
> putm(5:14) # Germany
CRS arguments:
 +proj=utm +zone=32 +datum=WGS84 +units=m +no_defs 
> putm(zone=33) # Berlin
CRS arguments:
 +proj=utm +zone=33 +datum=WGS84 +units=m +no_defs 
> 
> 
> 
> 
> cleanEx()
> nameEx("projectPoints")
> ### * projectPoints
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: projectPoints
> ### Title: Project lat-lon points
> ### Aliases: projectPoints
> ### Keywords: spatial
> 
> ### ** Examples
> 
> library("OpenStreetMap")
Warning: package 'OpenStreetMap' was built under R version 3.6.3
> lat <- runif(100, 6, 12)
> lon <- runif(100, 48, 58)
> plot(lat,lon)
> plot(projectMercator(lat,lon), main="Mercator")
Warning in showSRID(uprojargs, format = "PROJ", multiline = "NO") :
  Discarded ellps WGS 84 in CRS definition: +proj=merc +a=6378137 +b=6378137 +lat_ts=0 +lon_0=0 +x_0=0 +y_0=0 +k=1 +units=m +nadgrids=@null +wktext +no_defs
Warning in showSRID(uprojargs, format = "PROJ", multiline = "NO") :
  Discarded datum WGS_1984 in CRS definition
> plot(projectPoints(lat,lon), main="UTM32")
> stopifnot(all( projectPoints(lat,lon, to=posm()) == projectMercator(lat,lon) ))
Warning in showSRID(uprojargs, format = "PROJ", multiline = "NO") :
  Discarded ellps WGS 84 in CRS definition: +proj=merc +a=6378137 +b=6378137 +lat_ts=0 +lon_0=0 +x_0=0 +y_0=0 +k=1 +units=m +nadgrids=@null +wktext +no_defs
Warning in showSRID(uprojargs, format = "PROJ", multiline = "NO") :
  Discarded datum WGS_1984 in CRS definition
Warning in showSRID(uprojargs, format = "PROJ", multiline = "NO") :
  Discarded ellps WGS 84 in CRS definition: +proj=merc +a=6378137 +b=6378137 +lat_ts=0 +lon_0=0 +x_0=0 +y_0=0 +k=1 +units=m +nadgrids=@null +wktext +no_defs
Warning in showSRID(uprojargs, format = "PROJ", multiline = "NO") :
  Discarded datum WGS_1984 in CRS definition
> 
> projectPoints(c(52.4,NA),      c(13.6,12.9))
Warning in projectPoints(c(52.4, NA), c(13.6, 12.9)) :
  there are 1 NAs in coordinates.
         x       y
1 404750.6 5806451
2       NA      NA
> projectPoints(c(52.4,NA),      c(13.6,12.9), quiet=TRUE)
         x       y
1 404750.6 5806451
2       NA      NA
> projectPoints(c(52.4,52.3,NA), c(13.6,12.9,13.1))
Warning in projectPoints(c(52.4, 52.3, NA), c(13.6, 12.9, 13.1)) :
  there are 1 NAs in coordinates.
         x       y
1 404750.6 5806451
2 356807.6 5796483
3       NA      NA
> projectPoints(c(52.4,52.3,NA), c(13.6,NA  ,13.1))
Warning in projectPoints(c(52.4, 52.3, NA), c(13.6, NA, 13.1)) :
  there are 2 NAs in coordinates.
         x       y
1 404750.6 5806451
2       NA      NA
3       NA      NA
> projectPoints(c(52.4,52.3,NA), c(NA  ,12.9,13.1))
Warning in projectPoints(c(52.4, 52.3, NA), c(NA, 12.9, 13.1)) :
  there are 2 NAs in coordinates.
         x       y
1       NA      NA
2 356807.6 5796483
3       NA      NA
> 
> # Reference system ETRS89 with GRS80-Ellipsoid (common in Germany)
> set.seed(42)
> d <- data.frame(N=runif(50,5734000,6115000), E=runif(50, 33189000,33458000))
> d$VALUES <- berryFunctions::rescale(d$N, 20,40) + rnorm(50, sd=5)
> head(d)
        N        E   VALUES
1 6082541 33278692 40.10526
2 6091026 33282275 35.02864
3 5843019 33296193 33.60874
4 6050401 33400082 39.99717
5 5978505 33199474 33.39974
6 5931776 33390426 31.84320
> c1 <- projectPoints(lat=d$N, long=d$E-33e6, to=pll(),
+           from=sp::CRS("+proj=utm +zone=33 +ellps=GRS80 +units=m +no_defs") )
Warning in showSRID(uprojargs, format = "PROJ", multiline = "NO") :
  Discarded datum Unknown based on GRS80 ellipsoid in CRS definition
> c2 <- projectPoints(y, x, data=c1, to=posm() )
Warning in showSRID(uprojargs, format = "PROJ", multiline = "NO") :
  Discarded ellps WGS 84 in CRS definition: +proj=merc +a=6378137 +b=6378137 +lat_ts=0 +lon_0=0 +x_0=0 +y_0=0 +k=1 +units=m +nadgrids=@null +wktext +no_defs
Warning in showSRID(uprojargs, format = "PROJ", multiline = "NO") :
  Discarded datum WGS_1984 in CRS definition
> head(c1)
         x        y
1 11.55328 54.84098
2 11.60257 54.91867
3 11.98369 52.69866
4 13.45364 54.59119
5 10.42827 53.86780
6 13.34713 53.52347
> head(c2)
        x       y
1 1286105 7331065
2 1291592 7346097
3 1334018 6927452
4 1497652 7282926
5 1160870 7145158
6 1485796 7080418
> 
> ## Not run: 
> ##D  # not checked on CRAN because of file opening
> ##D map <- pointsMap(y,x, c1, plot=FALSE)
> ##D pdf("ETRS89.pdf")
> ##D par(mar=c(0,0,0,0))
> ##D plot(map)
> ##D rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4],
> ##D      col=berryFunctions::addAlpha("white", 0.7))
> ##D scaleBar(map, y=0.2, abslen=100)
> ##D points(c2)
> ##D berryFunctions::colPoints(c2$x, c2$y, d$VALUE )
> ##D dev.off()
> ##D system2("open", "ETRS89.pdf")  # on Linux, try "xdg-open"
> ##D #unlink("ETRS89.pdf")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()

detaching 'package:OpenStreetMap'

> nameEx("randomPoints")
> ### * randomPoints
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: randomPoints
> ### Title: Distanced random points
> ### Aliases: randomPoints
> ### Keywords: datagen spatial
> 
> ### ** Examples
> 
> 
> P <- randomPoints(xmin=200,xmax=700, ymin=300,ymax=680, number=60,mindist=10, asp=1)
> rect(xleft=200, ybottom=300, xright=700, ytop=680, col=NA, border=1)
> 
> format( round(P,4), trim=FALSE)
          x        y
1  332.7543 441.4071
2  486.4267 645.1190
3  300.8410 641.3881
4  672.3376 551.1032
5  514.5570 323.4788
6  302.9873 367.0916
7  543.5114 445.9594
8  584.9207 489.1257
9  558.8093 676.9243
10 390.0176 595.4292
11 667.3526 380.6142
12 525.8369 347.7109
13 206.6952 445.3074
14 634.8454 429.3326
15 441.0401 527.8350
16 446.7707 370.7627
17 613.6867 554.0174
18 597.1199 341.0186
19 561.8555 456.2843
20 591.4664 510.1538
21 464.8598 599.9554
22 211.6656 481.3474
23 566.1569 563.2380
24 438.8098 627.2596
25 419.0486 393.0230
26 235.3395 337.7971
27 358.1359 497.0810
28 531.0025 454.5955
29 656.4380 411.5693
30 429.5329 426.3100
31 525.4352 398.0464
32 439.2726 591.1981
33 242.1235 632.6221
34 369.5365 618.9873
35 373.3417 426.8345
36 438.1756 639.0354
37 632.1697 448.1960
38 588.6603 665.0348
39 417.3297 570.7556
40 399.9972 423.6338
41 578.5436 377.0231
42 555.5606 346.2429
43 322.7443 354.4557
44 319.8147 322.3951
45 521.1441 632.9823
46 589.4573 602.9774
47 427.6372 455.8320
48 605.4351 529.8747
49 527.3620 434.2150
50 335.1301 677.2199
51 516.7466 381.0191
52 264.6862 481.6849
53 662.0372 527.5292
54 688.0853 578.0812
55 378.3635 463.9600
56 274.1058 304.9695
57 423.1422 543.2384
58 695.9193 488.3256
59 577.4105 472.4803
60 455.5849 378.8671
> 
> for(i in 1:10)
+ {
+ rp <- randomPoints(xmin=0,xmax=20, ymin=0,ymax=20, number=20, mindist=3, plot=FALSE)
+ plot(rp, las=1, asp=1, pch=16)
+ abline(h=0:30*2, v=0:30*2, col=8); box()
+ for(i in 1:nrow(rp))
+     berryFunctions::circle(rp$x[i],rp$y[i], r=3, col=rgb(1,0,0,alpha=0.2), border=NA)
+ }
> 
> 
> 
> 
> cleanEx()
> nameEx("scaleBar")
> ### * scaleBar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scaleBar
> ### Title: scalebar for OSM plots
> ### Aliases: scaleBar
> ### Keywords: aplot spatial
> 
> ### ** Examples
> 
> if(interactive()){
+ d <- data.frame(long=c(12.95, 12.98, 13.22, 13.11), lat=c(52.40,52.52, 52.36, 52.45))
+ map <- pointsMap(lat,long,d, scale=FALSE, zoom=9)
+ coord <- scaleBar(map)  ; coord
+ scaleBar(map, bg=berryFunctions::addAlpha("white", 0.7))
+ scaleBar(map, 0.3, 0.05, unit="m", length=0.45, type="line")
+ scaleBar(map, 0.3, 0.5, unit="km", abslen=5, col=4:5, lwd=3)
+ scaleBar(map, 0.3, 0.8, unit="mi", col="red", targ=list(col="blue", font=2), type="line")
+ 
+ # I don't like subdivisions, but if you wanted them, you could use:
+ scaleBar(map, 0.12, 0.28, abslen=10, adj=c(0.5, -1.5)  )
+ scaleBar(map, 0.12, 0.28, abslen=4, adj=c(0.5, -1.5), targs=list(col="transparent"), label="" )
+ }
> 
> ## Not run: 
> ##D  # don't download too many maps in R CMD check
> ##D d <- read.table(header=TRUE, sep=",", text="
> ##D lat, long
> ##D 52.514687,  13.350012   # Berlin
> ##D 51.503162,  -0.131082   # London
> ##D 35.685024, 139.753365") # Tokio
> ##D map <- pointsMap(lat, long, d, zoom=2, abslen=5000, y=0.7)
> ##D scaleBar(map, y=0.5, abslen=5000)   # in mercator projections, scale bars are not
> ##D scaleBar(map, y=0.3, abslen=5000)   # transferable to other latitudes
> ##D 
> ##D map_utm <- pointsMap(lat, long, d[1:2,], proj=putm(long=d$long[1:2]),
> ##D                      zoom=4, y=0.7, abslen=500)
> ##D scaleBar(map_utm, y=0.5, abslen=500) # transferable in UTM projection
> ##D scaleBar(map_utm, y=0.3, abslen=500)
> ## End(Not run)
> 
> ## Not run: 
> ##D  ## Too much downloading time, too error-prone
> ##D # Tests around the world
> ##D par(mfrow=c(1,2), mar=rep(1,4))
> ##D long <- runif(2, -180, 180) ;  lat <- runif(2, -90, 90)
> ##D long <- 0:50 ;  lat <- 0:50
> ##D map <- pointsMap(lat, long)
> ##D map2 <- pointsMap(lat, long, map=map, proj=putm(long=long))
> ## End(Not run)
> 
> ## Not run: 
> ##D  ## excluded from tests to avoid package dependencies
> ##D berryFunctions::require2("SDMTools")
> ##D berryFunctions::require2("raster")
> ##D berryFunctions::require2("mapmisc")
> ##D par(mar=c(0,0,0,0))
> ##D map <- OSMscale::pointsMap(long=c(12.95, 13.22), lat=c(52.52, 52.36))
> ##D SDMTools::Scalebar(x=1443391,y=6889679,distance=10000)
> ##D raster::scalebar(d=10000, xy=c(1443391,6884254))
> ##D OSMscale::scaleBar(map, x=0.35, y=0.45, abslen=5)
> ##D library(mapmisc) # otherwise rbind for SpatialPoints is not found
> ##D mapmisc::scaleBar(map$tiles[[1]]$projection, seg.len=10, pos="center", bg="transparent")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("triangleArea")
> ### * triangleArea
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: triangleArea
> ### Title: Area of a triangle
> ### Aliases: triangleArea
> ### Keywords: spatial
> 
> ### ** Examples
> 
> 
> a <- c(1,5.387965,9); b <- c(1,1,5)
> plot(a[c(1:3,1)], b[c(1:3,1)], type="l", asp=1)#; grid()
> 
> triangleArea(a,b)
[1] 8.776
> #triangleArea(a,b[1:2])
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.65 0.3 3.11 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
